{"version":3,"sources":["features/dashboard/CountryData.module.scss","features/dashboard/Dashboard.module.scss","features/dashboard/NumberCard.module.scss","features/dashboard/coronaSlice.ts","features/dashboard/NumberValue.tsx","utils/formatHelpers.ts","features/dashboard/NumberCard.tsx","features/dashboard/SingleNumberCard.tsx","features/dashboard/CountryData.tsx","features/dashboard/GlobalCard.tsx","features/dashboard/GlobalData.tsx","features/dashboard/Dashboard.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","CoronaSlice","createSlice","name","initialState","latestGlobalData","historicData","selectedCountries","daysToShow","reducers","fetchLatestGlobalSuccess","state","action","payload","fetchCountryHistoricDataSuccess","data","code","countrycode","iso2","ts","timeseries","map","gd","acute","confirmed","recovered","deaths","i","length","d0","d1","acuteDelta","confirmedDelta","deathsDelta","recoveredDelta","target","j","doublingtime","actions","NumberValue","valueStr","n","value","positiveGood","withSign","withColor","percentage","sign","Math","round","toLocaleString","good","bad","className","classnames","NumberCard","label","useState","weekData","setWeekData","useSelector","corona","useEffect","wd","Array","push","date","delta","styles","number","key","left","right","SingleNumberCard","CountryData","dispatch","useDispatch","getState","a","axios","get","toUpperCase","response","rawData","rawTimeSeries","Object","keys","k","dateFns","Date","dateStr","representation","sort","b","localeCompare","console","log","countryHeader","countryregion","GlobalData","GlobalCard","Dashboard","rootContainer","c","href","App","store","configureStore","reducer","coronaReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc42a8f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryHeader\":\"CountryData_countryHeader__8c1j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootContainer\":\"Dashboard_rootContainer__1HTOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCard_number__1rkk8\",\"left\":\"NumberCard_left__1bkGy\",\"right\":\"NumberCard_right__teMx2\"};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport * as dateFns from \"date-fns\";\nimport { AppThunk } from \"../../app/store\";\n\ninterface HistoricData {\n  countryregion: string;\n  lastupdate: string;\n  countrycode: { iso2: string; iso3: string };\n  location: { lat: number; lng: number };\n  timeseries: TimeSeriesData[];\n}\n\ninterface TimeSeriesData extends GlobalData {\n  date: string;\n  acute: number;\n  doublingtime: number;\n  confirmedDelta: number;\n  deathsDelta: number;\n  recoveredDelta: number;\n}\n\nexport interface GlobalData {\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n  [key: string]:\n    | number\n    | string\n    | { lat: number; lng: number }\n    | { iso2: string; iso3: string };\n}\n\ninterface CoronaState {\n  latestGlobalData: GlobalData | null;\n  historicData: { [code: string]: HistoricData };\n  selectedCountries: string[];\n  daysToShow: number;\n}\n\nconst initialState: CoronaState = {\n  latestGlobalData: null,\n  historicData: {},\n  // selectedCountries: [\"DE\", \"GB\", \"FR\", \"JP\", \"US\"],\n  selectedCountries: [\"DE\", \"GB\", \"US\", \"FR\", \"CA\"],\n  // selectedCountries: [\"DE\"],\n  daysToShow: 7,\n};\n\nexport const CoronaSlice = createSlice({\n  name: \"corona\",\n  initialState,\n  reducers: {\n    fetchLatestGlobalSuccess: (state, action: PayloadAction<GlobalData>) => {\n      state.latestGlobalData = action.payload;\n    },\n    fetchCountryHistoricDataSuccess: (\n      state,\n      action: PayloadAction<HistoricData>\n    ) => {\n      const data = action.payload;\n      const code = data.countrycode.iso2;\n      let ts = data.timeseries;\n\n      // calc acute infected\n      ts = ts.map((gd) => ({\n        ...gd,\n        acute: gd.confirmed - gd.recovered - gd.deaths,\n      }));\n\n      // calc deltas to previous days\n      for (let i = 1; i < ts.length; i++) {\n        const d0 = ts[i - 1];\n        const d1 = ts[i];\n        ts[i] = {\n          ...ts[i],\n          acuteDelta: d0.acute - d1.acute,\n          confirmedDelta: d0.confirmed - d1.confirmed,\n          deathsDelta: d0.deaths - d1.deaths,\n          recoveredDelta: d0.recovered - d1.recovered,\n        };\n      }\n\n      // calc doubling times\n      for (let i = 0; i < ts.length; i++) {\n        // target if half of original value\n        const target = ts[i].confirmed / 2.0;\n        if (target === 0) {\n          break;\n        }\n\n        let j = i + 1;\n\n        // find out when it was that\n        while (j < ts.length && ts[j].confirmed > target) {\n          j += 1;\n        }\n\n        // valid?\n        if (j < ts.length) {\n          ts[i].doublingtime = j - i;\n        } else {\n          ts[i].doublingtime = 0;\n        }\n      }\n\n      data.timeseries = ts;\n      state.historicData[code] = data;\n    },\n  },\n});\n\nexport const {\n  fetchLatestGlobalSuccess,\n  fetchCountryHistoricDataSuccess,\n} = CoronaSlice.actions;\n\nexport const fetchLatestGlobalData = (): AppThunk => async (dispatch) => {\n  let data: GlobalData;\n\n  try {\n    const response = await axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/brief`\n    );\n    data = response.data;\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchLatestGlobalSuccess(data));\n};\n\nexport const fetchCountryHistoricData = (code: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  let data: HistoricData;\n\n  try {\n    const response = await axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/timeseries?iso2=${code.toUpperCase()}&onlyCountries=true`\n    );\n    const rawData = response.data[0];\n    const rawTimeSeries = rawData.timeseries;\n    const timeseries = Object.keys(rawTimeSeries)\n      .map((k) => {\n        const date = dateFns.parse(k, \"MM/dd/yy\", new Date());\n        const dateStr = dateFns.formatISO9075(date, { representation: \"date\" });\n        return { date: dateStr, ...rawTimeSeries[k] };\n      })\n      .sort((a: TimeSeriesData, b: TimeSeriesData) =>\n        b.date.localeCompare(a.date)\n      );\n    data = { ...rawData, timeseries };\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchCountryHistoricDataSuccess(data));\n};\n\nexport default CoronaSlice.reducer;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { formatPercentage } from \"../../utils/formatHelpers\";\n\ninterface Props {\n  value: number | null | undefined;\n  positiveGood?: boolean;\n  withSign?: boolean;\n  withColor?: boolean;\n  percentage?: boolean;\n}\n\nconst NumberValue: React.FC<Props> = ({\n  value,\n  positiveGood = false,\n  withSign = false,\n  withColor = false,\n  percentage = false,\n}) => {\n  let sign = \"\";\n  if (withSign && value && value >= 0) {\n    sign = \"+\";\n  }\n\n  let valueStr;\n  if (value == null) {\n    valueStr = \"-\";\n  } else if (percentage) {\n    valueStr = formatPercentage(value);\n  } else {\n    valueStr = value.toLocaleString();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let good =\n    withColor &&\n    ((positiveGood && sign === \"+\") || (!positiveGood && sign === \"\"));\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let bad =\n    withColor &&\n    ((positiveGood && sign === \"\") || (!positiveGood && sign === \"+\"));\n\n  return (\n    <span className={classnames({good: good, bad: bad})}>\n      {sign}\n      {valueStr}\n    </span>\n  );\n};\n\nexport default NumberValue;\n","export function formatPercentage(n: number) {\n  return `${Math.round(n * 1000) / 10} %`;\n}\n\nexport function formatNumber(n: number) {\n  return \"blub\";\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from \"classnames\";\nimport { Card } from \"primereact/card\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport styles from \"./NumberCard.module.scss\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  countrycode: string;\n  label: string;\n  name?: string;\n  value?: string | number;\n}\n\ninterface DayPoint {\n  date: string;\n  value: number;\n  delta: number;\n}\n\nconst NumberCard: React.FC<Props> = ({ countrycode, label, name, value }) => {\n  const [weekData, setWeekData] = useState<DayPoint[]>([]);\n  const historicData = useSelector(\n    (state: RootState) =>\n      state.corona.historicData && state.corona.historicData[countrycode]\n  );\n  const { daysToShow } = useSelector((state: RootState) => state.corona);\n\n  useEffect(() => {\n    if (historicData == null || name == null) return;\n\n    const wd: DayPoint[] = new Array<DayPoint>(7);\n    for (let i = 1; i < daysToShow; i++) {\n      wd.push({\n        date: historicData.timeseries[i].date,\n        value: historicData.timeseries[i][name] as number,\n        delta: historicData.timeseries[i][name + 'Delta'] as number,\n      });\n    }\n    setWeekData(wd);\n  }, [historicData, name]);\n\n  let valueStr = null;\n  if (value) {\n    valueStr = value as number;\n  } else if (historicData && name && historicData.timeseries[0][name]) {\n    valueStr = historicData.timeseries[0][name] as number;\n  }\n\n  return (\n    <div className=\"p-col\">\n      <Card className=\"\">\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} />\n        </div>\n\n        {weekData.map((wd) => (\n          <div key={wd.date} className=\"p-grid\">\n            <div className={classnames(\"p-col-5\", styles.left)}>\n              <NumberValue value={wd.delta} withSign={true} withColor={true} positiveGood={name === 'recovered'} />\n            </div>\n            <div className={classnames(\"p-col-7\", styles.right)}>\n              <NumberValue value={wd.value} />\n            </div>\n          </div>\n        ))}\n      </Card>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from \"classnames\";\nimport { Card } from \"primereact/card\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport styles from \"./NumberCard.module.scss\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  countrycode: string;\n  label: string;\n  name?: string;\n  value?: string | number;\n}\n\ninterface DayPoint {\n  date: string;\n  value: number;\n}\n\nconst SingleNumberCard: React.FC<Props> = ({\n  countrycode,\n  label,\n  name,\n  value,\n}) => {\n  const [weekData, setWeekData] = useState<DayPoint[]>([]);\n  const { daysToShow } = useSelector((state: RootState) => state.corona);\n  const historicData = useSelector(\n    (state: RootState) =>\n      state.corona.historicData && state.corona.historicData[countrycode]\n  );\n\n  useEffect(() => {\n    if (historicData == null || name == null) return;\n\n    const wd: DayPoint[] = new Array<DayPoint>(7);\n    for (let i = 1; i < daysToShow; i++) {\n      wd.push({\n        date: historicData.timeseries[i].date,\n        value: historicData.timeseries[i][name] as number,\n      });\n    }\n    setWeekData(wd);\n  }, [historicData]);\n\n  let valueStr = null;\n  if (historicData) {\n    valueStr = historicData.timeseries[0].doublingtime;\n  }\n\n  return (\n    <div className=\"p-col\">\n      <Card className=\"\">\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} /> days\n        </div>\n\n        {weekData.map((wd) => (\n          <div key={wd.date} className=\"p-grid p-justify-center\">\n            <div className={classnames(\"p-col\", styles.right)}>\n              <NumberValue value={wd.value} /> days\n            </div>\n          </div>\n        ))}\n      </Card>\n    </div>\n  );\n};\n\nexport default SingleNumberCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchCountryHistoricData } from \"./coronaSlice\";\nimport styles from \"./CountryData.module.scss\";\nimport NumberCard from \"./NumberCard\";\nimport SingleNumberCard from \"./SingleNumberCard\";\n\nexport interface Props {\n  countrycode: string;\n}\n\nconst CountryData: React.FC<Props> = ({ countrycode }) => {\n  const dispatch = useDispatch();\n  const data = useSelector(\n    (state: RootState) => state.corona.historicData[countrycode]\n  );\n\n  useEffect(() => {\n    dispatch(fetchCountryHistoricData(countrycode));\n  }, []);\n\n  return (\n    <div className=\"ui container\">\n      <h2 className={styles.countryHeader}>\n        {data?.countryregion || countrycode}\n      </h2>\n\n      <div className=\"p-grid\">\n        <NumberCard countrycode={countrycode} name=\"acute\" label=\"Acute\" />\n\n        <NumberCard\n          countrycode={countrycode}\n          name=\"confirmed\"\n          label=\"Confirmed\"\n        />\n\n        <NumberCard\n          countrycode={countrycode}\n          name=\"recovered\"\n          label=\"Recovered\"\n        />\n\n        <NumberCard countrycode={countrycode} name=\"deaths\" label=\"Deaths\" />\n\n        <SingleNumberCard\n          countrycode={countrycode}\n          label=\"Doubling Time\"\n          name=\"doublingtime\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CountryData;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchCountryHistoricData, GlobalData } from \"./coronaSlice\";\nimport styles from \"./NumberCard.module.scss\";\nimport { Card } from \"primereact/card\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  label: string;\n  name?: string;\n  value?: number | null;\n  percentage?: boolean;\n}\n\nconst NumberCard: React.FC<Props> = ({ label, name, value, percentage }) => {\n  const data = useSelector((state: RootState) => state.corona.latestGlobalData);\n  const valueStr =\n    value || (data != null && name != null && (data[name] as number)) || null;\n\n  return (\n    <div className=\"p-col\">\n      <Card>\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} percentage={percentage} />\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport GlobalCard from \"./GlobalCard\";\nimport styles from \"./CountryData.module.scss\";\n\nconst GlobalData: React.FC = () => {\n  const data = useSelector((state: RootState) => state.corona.latestGlobalData);\n\n  return (\n    <div className=\"ui container\">\n      <h2 className={styles.countryHeader}>World-Wide</h2>\n\n      <div className=\"p-grid\">\n        <GlobalCard label=\"Confirmed\" name=\"confirmed\" />\n        <GlobalCard label=\"Recovered\" name=\"recovered\" />\n        <GlobalCard label=\"Deaths\" name=\"deaths\" />\n        <GlobalCard\n          label=\"Fatality Rate\"\n          value={(data && data.deaths / data.confirmed) || null}\n          percentage={true}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalData;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchLatestGlobalData } from \"./coronaSlice\";\nimport CountryData from \"./CountryData\";\nimport styles from \"./Dashboard.module.scss\";\nimport GlobalData from \"./GlobalData\";\nimport { Card } from \"primereact/card\";\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const { selectedCountries } = useSelector((state: RootState) => state.corona);\n\n  useEffect(() => {\n    dispatch(fetchLatestGlobalData());\n  }, []);\n\n  return (\n    <div className={styles.rootContainer}>\n      <h1>Mr K.'s Corona Dashboard</h1>\n\n      <GlobalData />\n\n      {selectedCountries.map((c) => (\n        <CountryData key={c} countrycode={c} />\n      ))}\n\n      <Card className=\"footer\">\n        <p>\n          Data is from John-Hopkins-University, updated once per day:{\" \"}\n          <a href=\"https://github.com/CSSEGISandData/COVID-19\">\n            https://github.com/CSSEGISandData/COVID-19\n          </a>\n        </p>\n\n        <p>\n          Inspired by Inje Lee's article.{\" \"}\n          <a href=\"https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\">\n            https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\n          </a>\n        </p>\n\n        <p>\n          Thanks to Ainize for providing the data API:{\" \"}\n          <a href=\"https://ainize.ai/laeyoung/wuhan-coronavirus-api\">\n            https://ainize.ai/laeyoung/wuhan-coronavirus-api\n          </a>\n        </p>\n      </Card>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./features/dashboard/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n\n// inspiration:\n// https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport coronaReducer from \"../features/dashboard/coronaSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    corona: coronaReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'primeflex/primeflex.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}