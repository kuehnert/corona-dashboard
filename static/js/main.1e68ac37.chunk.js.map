{"version":3,"sources":["features/dashboard/NumberCard.module.scss","features/dashboard/CountryData.module.scss","features/dashboard/Dashboard.module.scss","features/dashboard/coronaSlice.ts","features/dashboard/NumberCard.tsx","features/dashboard/CountryData.tsx","features/dashboard/Dashboard.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","CoronaSlice","createSlice","name","initialState","latestData","historicData","selectedCountries","reducers","fetchLatestDataSuccess","state","action","payload","actions","NumberCard","small","large","className","styles","number","CountryData","n","countryCode","data","useSelector","corona","find","cd","countrycode","iso2","countryHeader","countryregion","confirmed","recovered","deaths","Math","round","Dashboard","dispatch","useDispatch","useEffect","getState","a","codes","requests","map","code","axios","get","all","responses","r","console","log","classnames","rootContainer","c","key","App","counterSlice","value","increment","decrement","incrementByAmount","store","configureStore","reducer","coronaReducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e68ac37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCard_number__1rkk8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryHeader\":\"CountryData_countryHeader__8c1j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootContainer\":\"Dashboard_rootContainer__1HTOq\"};","import { createSlice, PayloadAction, createSelector } from \"@reduxjs/toolkit\";\r\n// import { AppThunk, RootState } from \"../../app/store\";\r\nimport { AppThunk, RootState } from \"../../app/store\";\r\nimport axios from \"axios\";\r\n\r\nexport interface CountryData {\r\n  countryregion: string;\r\n  lastupdate: string;\r\n  location: { lat: number; lng: number };\r\n  countrycode: { iso2: string; iso3: string };\r\n  confirmed: number;\r\n  deaths: number;\r\n  recovered: number;\r\n}\r\n\r\ninterface CoronaState {\r\n  latestData: CountryData[] | null;\r\n  historicData: CountryData[] | null;\r\n  selectedCountries: string[];\r\n}\r\n\r\nconst initialState: CoronaState = {\r\n  latestData: null,\r\n  historicData: null,\r\n  selectedCountries: [\"DE\", \"GB\", \"US\"],\r\n};\r\n\r\nexport const CoronaSlice = createSlice({\r\n  name: \"corona\",\r\n  initialState,\r\n  reducers: {\r\n    fetchLatestDataSuccess: (state, action: PayloadAction<CountryData[]>) => {\r\n      state.latestData = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetchLatestDataSuccess } = CoronaSlice.actions;\r\n\r\nexport const fetchLatestData = (): AppThunk => async (dispatch, getState) => {\r\n  const codes = getState().corona.selectedCountries;\r\n  const requests = codes.map((code) =>\r\n    axios.get(\r\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/latest?iso2=${code}&onlyCountries=true`\r\n    )\r\n  );\r\n  let latestData: CountryData[] = [];\r\n\r\n  try {\r\n    const responses = await axios.all(requests);\r\n    latestData = responses.map((r) => r.data[0]);\r\n  } catch (error) {\r\n    console.log(\"error:\", error);\r\n    return;\r\n  }\r\n\r\n  dispatch(fetchLatestDataSuccess(latestData));\r\n};\r\n\r\n// export const selectCount = (state: RootState) => state.corona.value;\r\nconst latestDataSelector = (state: RootState) => state.corona.latestData;\r\n\r\nexport const countryLatestData = (code: string) => {\r\n  return createSelector(latestDataSelector, (latestData) => {\r\n    console.log('latestData:', latestData);\r\n\r\n    // const data = latestData?.find((cd) => cd.countrycode.iso2 === code);\r\n    // console.log('data:', data);\r\n    // return data;\r\n    return 0;\r\n  });\r\n};\r\n\r\nexport default CoronaSlice.reducer;\r\n","import React from \"react\";\nimport styles from './NumberCard.module.scss'\n\ninterface Props {\n  small: string | number;\n  large: string | number | undefined;\n}\n\nconst NumberCard: React.FC<Props> = ({ small, large }) => {\n  return (\n    <div className=\"column\">\n      <div className=\"ui card\">\n        <div className=\"content\">\n          <div className=\"description\">{small}</div>\n          <div className={styles.number}>{large || '-'}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport NumberCard from \"./NumberCard\";\nimport styles from './CountryData.module.scss'\n\nexport interface Props {\n  countryCode: string;\n}\n\nfunction formatPercs(n: number) {\n  return `${Math.round(n * 1000) / 10} %`;\n}\n\nconst CountryData: React.FC<Props> = ({ countryCode }) => {\n  const data = useSelector((state: RootState) =>\n    state.corona.latestData?.find((cd) => cd.countrycode.iso2 === countryCode)\n  );\n\n  return (\n    <div className=\"ui container\">\n      <h2 className={styles.countryHeader}>{data?.countryregion || countryCode}</h2>\n\n      <div className=\"ui grid\">\n        <div className=\"doubling four column row\">\n          <NumberCard small=\"Confirmed\" large={data?.confirmed} />\n          <NumberCard small=\"Recovered\" large={data?.recovered} />\n          <NumberCard small=\"Deaths\" large={data?.deaths} />\n          <NumberCard\n            small=\"Fatality Rate\"\n            large={data ? formatPercs(data.deaths / data.confirmed) : ''}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryData;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport { RootState } from \"../../app/store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchLatestData } from \"./coronaSlice\";\nimport CountryData from \"./CountryData\";\nimport classnames from \"classnames\";\nimport styles from './Dashboard.module.scss'\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const { selectedCountries } = useSelector((state: RootState) => state.corona);\n\n  useEffect(() => {\n    dispatch(fetchLatestData());\n  }, []);\n\n  return (\n    <div className={classnames(\"ui container\", styles.rootContainer)}>\n      <h1>Corona Dashboard</h1>\n\n      {selectedCountries.map((c) => (\n        <CountryData key={c} countryCode={c} />\n      ))}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\r\nimport Dashboard from \"./features/dashboard/Dashboard\";\r\n\r\nfunction App() {\r\n  return <Dashboard />;\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"../features/counter/counterSlice\";\r\nimport coronaReducer from \"../features/dashboard/coronaSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    corona: coronaReducer,\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}