{"version":3,"sources":["features/dashboard/CountryData.module.scss","features/dashboard/Dashboard.module.scss","features/dashboard/coronaSlice.ts","features/dashboard/NumberValue.tsx","utils/formatHelpers.ts","features/dashboard/NumberCard.tsx","features/dashboard/CountryData.tsx","features/dashboard/GlobalCard.tsx","features/dashboard/GlobalData.tsx","features/dashboard/Dashboard.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","features/dashboard/NumberCard.module.scss"],"names":["module","exports","CoronaSlice","createSlice","name","initialState","latestData","latestGlobalData","historicData","deltaData","selectedCountries","reducers","fetchLatestDataSuccess","state","action","payload","fetchLatestGlobalSuccess","fetchCountryHistoricDataSuccess","data","code","countrycode","iso2","ts","timeseries","dts","Array","length","i","d0","d1","date","confirmed","deaths","recovered","actions","NumberValue","valueStr","n","value","positiveGood","withSign","percentage","sign","Math","round","toLocaleString","className","classnames","red","green","NumberCard","label","useState","weekData","setWeekData","useSelector","corona","find","cd","useEffect","wd","push","delta","styles","number","map","key","left","right","CountryData","dispatch","useDispatch","getState","a","axios","get","toUpperCase","response","rawData","rawTimeSeries","Object","keys","k","dateFns","Date","dateStr","representation","sort","b","localeCompare","console","log","countryHeader","countryregion","GlobalData","GlobalCard","Dashboard","codes","requests","all","responses","r","rootContainer","c","App","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","coronaReducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b4b3d6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryHeader\":\"CountryData_countryHeader__8c1j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootContainer\":\"Dashboard_rootContainer__1HTOq\"};","import { createSlice, PayloadAction, createSelector } from \"@reduxjs/toolkit\";\n// import { AppThunk, RootState } from \"../../app/store\";\nimport { AppThunk, RootState } from \"../../app/store\";\nimport axios from \"axios\";\nimport * as dateFns from \"date-fns\";\n\nexport interface CountryData extends GlobalData {\n  countryregion: string;\n  lastupdate: string;\n  location: { lat: number; lng: number };\n  countrycode: { iso2: string; iso3: string };\n  // confirmed: number;\n  // deaths: number;\n  // recovered: number;\n}\n\ninterface HistoricData {\n  countryregion: string;\n  lastupdate: string;\n  countrycode: { iso2: string; iso3: string };\n  location: { lat: number; lng: number };\n  timeseries: TimeSeriesData[];\n}\n\ninterface TimeSeriesData extends GlobalData {\n  date: string;\n}\n\nexport interface GlobalData {\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n  [key: string]:\n    | number\n    | string\n    | { lat: number; lng: number }\n    | { iso2: string; iso3: string };\n}\n\ninterface CoronaState {\n  latestData: CountryData[] | null;\n  latestGlobalData: GlobalData | null;\n  historicData: { [code: string]: HistoricData };\n  deltaData: { [code: string]: TimeSeriesData[] };\n  selectedCountries: string[];\n}\n\nconst initialState: CoronaState = {\n  latestData: null,\n  latestGlobalData: null,\n  historicData: {},\n  deltaData: {},\n  // selectedCountries: [\"DE\", \"GB\", \"FR\", \"JP\", \"US\"],\n  selectedCountries: [\"DE\", \"GB\", \"US\"],\n  // selectedCountries: [\"DE\"],\n};\n\nexport const CoronaSlice = createSlice({\n  name: \"corona\",\n  initialState,\n  reducers: {\n    fetchLatestDataSuccess: (state, action: PayloadAction<CountryData[]>) => {\n      state.latestData = action.payload;\n    },\n    fetchLatestGlobalSuccess: (state, action: PayloadAction<GlobalData>) => {\n      state.latestGlobalData = action.payload;\n    },\n    fetchCountryHistoricDataSuccess: (\n      state,\n      action: PayloadAction<HistoricData>\n    ) => {\n      const data = action.payload;\n      const code = data.countrycode.iso2;\n      const ts = data.timeseries;\n      const dts = new Array(ts.length);\n\n      for (let i = 1; i < ts.length; i++) {\n        const d0 = ts[i-1];\n        const d1 = ts[i];\n        dts[i] = {\n          date: d0.date,\n          confirmed: d0.confirmed - d1.confirmed,\n          deaths: d0.deaths - d1.deaths,\n          recovered: d0.recovered - d1.recovered,\n        };\n      }\n\n      state.historicData[code] = data;\n      state.deltaData[code] = dts;\n    },\n  },\n});\n\nexport const {\n  fetchLatestDataSuccess,\n  fetchLatestGlobalSuccess,\n  fetchCountryHistoricDataSuccess,\n} = CoronaSlice.actions;\n\nexport const fetchLatestGlobalData = (): AppThunk => async (dispatch) => {\n  let data: GlobalData;\n\n  try {\n    const response = await axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/brief`\n    );\n    data = response.data;\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchLatestGlobalSuccess(data));\n};\n\nexport const fetchLatestData = (): AppThunk => async (dispatch, getState) => {\n  const codes = getState().corona.selectedCountries;\n  const requests = codes.map((code) =>\n    axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/latest?iso2=${code}&onlyCountries=true`\n    )\n  );\n  let latestData: CountryData[] = [];\n\n  try {\n    const responses = await axios.all(requests);\n    latestData = responses.map((r) => r.data[0]);\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchLatestDataSuccess(latestData));\n};\n\nexport const fetchCountryHistoricData = (code: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  let data: HistoricData;\n\n  try {\n    const response = await axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/timeseries?iso2=${code.toUpperCase()}&onlyCountries=true`\n    );\n    const rawData = response.data[0];\n    const rawTimeSeries = rawData.timeseries;\n    const timeseries = Object.keys(rawTimeSeries)\n      .map((k) => {\n        const date = dateFns.parse(k, \"MM/dd/yy\", new Date());\n        const dateStr = dateFns.formatISO9075(date, { representation: \"date\" });\n        return { date: dateStr, ...rawTimeSeries[k] };\n      })\n      .sort((a: TimeSeriesData, b: TimeSeriesData) =>\n        b.date.localeCompare(a.date)\n      );\n    data = { ...rawData, timeseries };\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchCountryHistoricDataSuccess(data));\n};\n\n// export const selectCount = (state: RootState) => state.corona.value;\nconst latestDataSelector = (state: RootState) => state.corona.latestData;\n\nexport const countryLatestData = (code: string) => {\n  return createSelector(latestDataSelector, (latestData) => {\n    console.log(\"latestData:\", latestData);\n\n    // const data = latestData?.find((cd) => cd.countrycode.iso2 === code);\n    // console.log('data:', data);\n    // return data;\n    return 0;\n  });\n};\n\nexport default CoronaSlice.reducer;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { formatPercentage } from \"../../utils/formatHelpers\";\n\ninterface Props {\n  value: number | null | undefined;\n  positiveGood?: boolean;\n  withSign?: boolean;\n  percentage?: boolean;\n}\n\nconst NumberValue: React.FC<Props> = ({\n  value,\n  positiveGood = false,\n  withSign = false,\n  percentage = false,\n}) => {\n  let sign = \"\";\n  if (withSign) {\n    sign = value && value >= 0 ? \"+\" : \"-\";\n  }\n\n  let valueStr;\n  if (value == null) {\n    valueStr = \"-\";\n  } else if (percentage) {\n    valueStr = formatPercentage(value);\n  } else {\n    valueStr = value.toLocaleString();\n  }\n\n  return (\n    <span className={classnames({ red: sign === \"-\", green: sign === \"+\" })}>\n      {sign}\n      {valueStr}\n    </span>\n  );\n};\n\nexport default NumberValue;\n","export function formatPercentage(n: number) {\n  return `${Math.round(n * 1000) / 10} %`;\n}\n\nexport function formatNumber(n: number) {\n  return \"blub\";\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from \"classnames\";\nimport { Card } from \"primereact/card\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport styles from \"./NumberCard.module.scss\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  countrycode: string;\n  label: string;\n  name?: string;\n  value?: string | number;\n}\n\ninterface DayPoint {\n  date: string;\n  value: number;\n  delta: number;\n}\n\nconst NumberCard: React.FC<Props> = ({ countrycode, label, name, value }) => {\n  const [weekData, setWeekData] = useState<DayPoint[]>([]);\n  const data = useSelector((state: RootState) =>\n    state.corona.latestData?.find((cd) => cd.countrycode.iso2 === countrycode)\n  );\n  const historicData = useSelector(\n    (state: RootState) =>\n      state.corona.historicData && state.corona.historicData[countrycode]\n  );\n  const deltaData = useSelector(\n    (state: RootState) =>\n      state.corona.historicData && state.corona.deltaData[countrycode]\n  );\n\n  useEffect(() => {\n    if (data == null || deltaData == null || name == null) return;\n\n    const wd: DayPoint[] = new Array<DayPoint>(7);\n    for (let i = 1; i < 7; i++) {\n      wd.push({\n        date: historicData.timeseries[i].date,\n        value: historicData.timeseries[i][name] as number,\n        delta: deltaData[i][name] as number,\n      });\n    }\n    setWeekData(wd);\n  }, [data, deltaData]);\n\n  let valueStr = null;\n  if (value) {\n    valueStr = value as number;\n  } else  if (data && name && data[name]) {\n    valueStr = data[name] as number;\n  }\n\n  return (\n    <div className=\"p-col-6 p-lg-3\">\n      <Card className=\"\">\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}><NumberValue value={valueStr} /></div>\n\n        {weekData.map((wd) => (\n          <div key={wd.date} className=\"p-grid\">\n            <div className={classnames(\"p-col-5\", styles.left)}>\n              <NumberValue value={wd.delta} withSign={true} />\n            </div>\n            <div className={classnames(\"p-col-7\", styles.right)}>\n              <NumberValue value={wd.value} />\n            </div>\n          </div>\n        ))}\n      </Card>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport NumberCard from \"./NumberCard\";\nimport styles from \"./CountryData.module.scss\";\nimport { fetchCountryHistoricData, GlobalData } from \"./coronaSlice\";\n\nexport interface Props {\n  countrycode: string;\n}\n\nfunction formatPercs(n: number) {\n  return `${Math.round(n * 1000) / 10} %`;\n}\n\nconst CountryData: React.FC<Props> = ({ countrycode }) => {\n  const dispatch = useDispatch();\n  const data = useSelector((state: RootState) =>\n    state.corona.latestData?.find((cd) => cd.countrycode.iso2 === countrycode)\n  );\n\n  useEffect(() => {\n    dispatch(fetchCountryHistoricData(countrycode));\n  }, []);\n\n  return (\n    <div className=\"ui container\">\n      <h2 className={styles.countryHeader}>\n        {data?.countryregion || countrycode}\n      </h2>\n\n      <div className=\"p-grid\">\n        <NumberCard\n          countrycode={countrycode}\n          name=\"confirmed\"\n          label=\"Confirmed\"\n        />\n        <NumberCard\n          countrycode={countrycode}\n          name=\"recovered\"\n          label=\"Recovered\"\n        />\n        <NumberCard countrycode={countrycode} name=\"deaths\" label=\"Deaths\" />\n        {/* <NumberCard\n            small=\"Fatality Rate\"\n            large={data ? formatPercs(data.deaths / data.confirmed) : \"\"}\n          /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default CountryData;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchCountryHistoricData, GlobalData } from \"./coronaSlice\";\nimport styles from \"./NumberCard.module.scss\";\nimport { Card } from \"primereact/card\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  label: string;\n  name?: string;\n  value?: number | null;\n  percentage?: boolean;\n}\n\nconst NumberCard: React.FC<Props> = ({ label, name, value, percentage }) => {\n  const data = useSelector((state: RootState) => state.corona.latestGlobalData);\n  const valueStr =\n    value || (data != null && name != null && (data[name] as number)) || null;\n\n  return (\n    <div className=\"p-col\">\n      <Card>\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} percentage={percentage} />\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport GlobalCard from \"./GlobalCard\";\nimport styles from \"./CountryData.module.scss\";\n\nconst GlobalData: React.FC = () => {\n  const data = useSelector((state: RootState) => state.corona.latestGlobalData);\n\n  return (\n    <div className=\"ui container\">\n      <h2 className={styles.countryHeader}>World-Wide</h2>\n\n      <div className=\"p-grid\">\n        <GlobalCard label=\"Confirmed\" name=\"confirmed\" />\n        <GlobalCard label=\"Recovered\" name=\"recovered\" />\n        <GlobalCard label=\"Deaths\" name=\"deaths\" />\n        <GlobalCard\n          label=\"Fatality Rate\"\n          value={(data && data.deaths / data.confirmed) || null}\n          percentage={true}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalData;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchLatestData, fetchLatestGlobalData } from \"./coronaSlice\";\nimport CountryData from \"./CountryData\";\nimport styles from \"./Dashboard.module.scss\";\nimport GlobalData from \"./GlobalData\";\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const { selectedCountries } = useSelector((state: RootState) => state.corona);\n\n  useEffect(() => {\n    dispatch(fetchLatestData());\n    dispatch(fetchLatestGlobalData());\n  }, []);\n\n  return (\n    <div className={styles.rootContainer}>\n      <h1>Mr K.'s Corona Dashboard</h1>\n\n      <GlobalData />\n\n      {selectedCountries.map((c) => (\n        <CountryData key={c} countrycode={c} />\n      ))}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./features/dashboard/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n\n// inspiration:\n// https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport coronaReducer from \"../features/dashboard/coronaSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    corona: coronaReducer,\n    counter: counterReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'primeflex/primeflex.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCard_number__1rkk8\",\"left\":\"NumberCard_left__1bkGy\",\"right\":\"NumberCard_right__teMx2\"};"],"sourceRoot":""}