{"version":3,"sources":["features/dashboard/coronaSlice.ts","features/dashboard/NumberValue.tsx","utils/formatHelpers.ts","features/dashboard/NumberCard.tsx","features/dashboard/SingleNumberCard.tsx","features/dashboard/CountryData.tsx","features/dashboard/GlobalCard.tsx","features/dashboard/GlobalData.tsx","features/dashboard/CountryPickList.tsx","features/dashboard/Settings.tsx","features/dashboard/CountryChart.tsx","features/dashboard/Dashboard.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/dashboard/NumberCard.module.scss","features/dashboard/Settings.module.scss","features/dashboard/CountryData.module.scss","features/dashboard/Dashboard.module.scss"],"names":["countryList","name","code","initialState","latestGlobalData","historicData","sourceCountries","selectedCountries","daysToShow","showCharts","CoronaSlice","createSlice","reducers","fetchLatestGlobalSuccess","state","action","payload","fetchCountryHistoricDataSuccess","data","countrycode","iso2","ts","timeseries","map","gd","acute","confirmed","recovered","deaths","fatality","NaN","i","length","d0","d1","acuteDelta","confirmedDelta","deathsDelta","recoveredDelta","target","j","doublingtime","setShowChartsSuccess","setCountriesSuccess","source","actions","setCountries","dispatch","a","localStorage","setItem","JSON","stringify","fetchCountryHistoricData","getState","axios","get","toUpperCase","response","rawData","rawTimeSeries","Object","keys","k","date","dateFns","Date","dateStr","representation","sort","b","localeCompare","console","log","NumberValue","valueStr","n","percentage","positiveGood","value","withColor","withSign","sign","Math","round","toLocaleString","good","bad","className","classnames","NumberCard","label","useState","weekData","setWeekData","useSelector","corona","useEffect","wd","Array","push","delta","styles","number","key","right","SingleNumberCard","suffix","CountryData","useDispatch","classNames","countryHeader","countryregion","d","s","formatRelative","parseJSON","charAt","toLocaleUpperCase","slice","formatDate","lastupdate","GlobalData","GlobalCard","CountryPickList","itemTemplate","country","sourceHeader","targetHeader","responsive","onChange","event","sourceStyle","height","targetStyle","Settings","visible","setVisible","header","modal","onHide","dialog","contentStyle","toolbar","onLabel","offLabel","onIcon","offIcon","checked","setShowCharts","toggleButton","icon","button","tooltip","onClick","forEach","tooltipOptions","position","CountryChart","chartData","setChartData","reversed","reverse","newData","labels","datasets","borderColor","backgroundColor","fill","title","type","window","innerWidth","Dashboard","sourceStr","getItem","targetStr","parse","rootContainer","c","href","App","store","configureStore","reducer","coronaReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.bcec495b.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport * as dateFns from \"date-fns\";\nimport { AppThunk } from \"../../app/store\";\n\nexport interface Country {\n  name: string;\n  code: string;\n}\n\nexport const countryList = [\n  { name: \"Germany\", code: \"DE\" },\n  { name: \"Australia\", code: \"AU\" },\n  { name: \"Austria\", code: \"AT\" },\n  { name: \"Canada\", code: \"CA\" },\n  { name: \"China\", code: \"CN\" },\n  { name: \"Czechia\", code: \"CZ\" },\n  { name: \"France\", code: \"FR\" },\n  { name: \"Greece\", code: \"GR\" },\n  { name: \"India\", code: \"IN\" },\n  { name: \"Indonesia\", code: \"ID\" },\n  { name: \"Iran\", code: \"IR\" },\n  { name: \"Ireland\", code: \"IE\" },\n  { name: \"Israel\", code: \"IL\" },\n  { name: \"Italy\", code: \"IT\" },\n  { name: \"Japan\", code: \"JP\" },\n  { name: \"Luxembourg\", code: \"LU\" },\n  { name: \"Malaysia\", code: \"MY\" },\n  { name: \"Maldives\", code: \"MV\" },\n  { name: \"Mexico\", code: \"MX\" },\n  { name: \"Netherlands\", code: \"NL\" },\n  { name: \"Nigeria\", code: \"NG\" },\n  { name: \"Poland\", code: \"PL\" },\n  { name: \"Portugal\", code: \"PT\" },\n  { name: \"Singapore\", code: \"SG\" },\n  { name: \"Spain\", code: \"ES\" },\n  { name: \"Sri Lanka\", code: \"LK\" },\n  { name: \"Sweden\", code: \"SE\" },\n  { name: \"Switzerland\", code: \"CH\" },\n  { name: \"Thailand\", code: \"TH\" },\n  { name: \"Turkey\", code: \"TR\" },\n  { name: \"United Kingdom\", code: \"GB\" },\n  { name: \"United States\", code: \"US\" },\n  { name: \"Viet Nam\", code: \"VN\" },\n];\n\ninterface HistoricData {\n  countryregion: string;\n  lastupdate: string;\n  countrycode: { iso2: string; iso3: string };\n  location: { lat: number; lng: number };\n  timeseries: TimeSeriesData[];\n}\n\ninterface TimeSeriesData extends GlobalData {\n  date: string;\n  acute: number;\n  doublingtime: number;\n  confirmedDelta: number;\n  deathsDelta: number;\n  recoveredDelta: number;\n}\n\nexport interface GlobalData {\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n  [key: string]:\n    | number\n    | string\n    | { lat: number; lng: number }\n    | { iso2: string; iso3: string };\n}\n\ninterface CoronaState {\n  latestGlobalData: GlobalData | null;\n  historicData: { [code: string]: HistoricData };\n  sourceCountries: Country[];\n  selectedCountries: Country[];\n  daysToShow: number;\n  showCharts: boolean;\n}\n\nconst initialState: CoronaState = {\n  latestGlobalData: null,\n  historicData: {},\n  sourceCountries: [...countryList],\n  selectedCountries: [],\n  daysToShow: 7,\n  showCharts: true,\n};\n\nexport const CoronaSlice = createSlice({\n  name: \"corona\",\n  initialState,\n  reducers: {\n    fetchLatestGlobalSuccess: (state, action: PayloadAction<GlobalData>) => {\n      state.latestGlobalData = action.payload;\n    },\n    fetchCountryHistoricDataSuccess: (\n      state,\n      action: PayloadAction<HistoricData>\n    ) => {\n      const data = action.payload;\n      const code = data.countrycode.iso2;\n      let ts = data.timeseries;\n\n      // calc acute infected\n      ts = ts.map((gd) => ({\n        ...gd,\n        acute: gd.confirmed - gd.recovered - gd.deaths,\n        fatality: gd.confirmed > 0 ? gd.deaths / gd.confirmed : NaN,\n      }));\n\n      // calc deltas to previous days\n      for (let i = 1; i < ts.length; i++) {\n        const d0 = ts[i - 1];\n        const d1 = ts[i];\n        ts[i] = {\n          ...ts[i],\n          acuteDelta: d0.acute - d1.acute,\n          confirmedDelta: d0.confirmed - d1.confirmed,\n          deathsDelta: d0.deaths - d1.deaths,\n          recoveredDelta: d0.recovered - d1.recovered,\n        };\n      }\n\n      // calc doubling times\n      for (let i = 0; i < ts.length; i++) {\n        // target if half of original value\n        const target = ts[i].confirmed / 2.0;\n        if (target === 0) {\n          break;\n        }\n\n        let j = i + 1;\n\n        // find out when it was that\n        while (j < ts.length && ts[j].confirmed > target) {\n          j += 1;\n        }\n\n        // valid?\n        if (j < ts.length) {\n          ts[i].doublingtime = j - i;\n        } else {\n          ts[i].doublingtime = 0;\n        }\n      }\n\n      data.timeseries = ts;\n      state.historicData[code] = data;\n    },\n    setShowChartsSuccess: (state, action: PayloadAction<boolean>) => {\n      state.showCharts = action.payload;\n    },\n    setCountriesSuccess: (\n      state,\n      action: PayloadAction<{ source: Country[]; target: Country[] }>\n    ) => {\n      state.sourceCountries = action.payload.source;\n      state.selectedCountries = action.payload.target;\n    },\n  },\n});\n\nexport const {\n  fetchLatestGlobalSuccess,\n  fetchCountryHistoricDataSuccess,\n  setCountriesSuccess,\n  setShowChartsSuccess,\n} = CoronaSlice.actions;\n\nexport const getCountries = (): AppThunk => async (dispatch) => {\n  const sourceStr = localStorage.getItem(\"sourceCountries\");\n\n  if (sourceStr) {\n    const targetStr = localStorage.getItem(\"selectedCountries\");\n    const source = JSON.parse(sourceStr!);\n    const target = JSON.parse(targetStr!);\n    const showCharts = JSON.parse(localStorage.getItem(\"showCharts\")!);\n    dispatch(setCountriesSuccess({ source, target }));\n    dispatch(setShowChartsSuccess(showCharts));\n  }\n};\n\nexport const setShowCharts = (showCharts: boolean): AppThunk => async (\n  dispatch\n) => {\n  localStorage.setItem(\"showCharts\", JSON.stringify(showCharts));\n  dispatch(setShowChartsSuccess(showCharts));\n};\n\nexport const setCountries = (\n  source: Country[],\n  target: Country[]\n): AppThunk => async (dispatch) => {\n  localStorage.setItem(\"sourceCountries\", JSON.stringify(source));\n  localStorage.setItem(\"selectedCountries\", JSON.stringify(target));\n  dispatch(setCountriesSuccess({ source, target }));\n};\n\nexport const resetCountries = (): AppThunk => async (dispatch) => {\n  const source: Country[] = [...countryList];\n  const target: Country[] = [];\n  dispatch(setCountries(source, target));\n};\n\nexport const fetchLatestGlobalData = (): AppThunk => async (dispatch) => {\n  let data: GlobalData;\n\n  try {\n    const response = await axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/brief`\n    );\n    data = response.data;\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchLatestGlobalSuccess(data));\n};\n\nexport const fetchCountryHistoricData = (code: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  let data: HistoricData;\n\n  try {\n    const response = await axios.get(\n      `https://wuhan-coronavirus-api.laeyoung.endpoint.ainize.ai/jhu-edu/timeseries?iso2=${code.toUpperCase()}&onlyCountries=true`\n    );\n    const rawData = response.data[0];\n    const rawTimeSeries = rawData.timeseries;\n    const timeseries = Object.keys(rawTimeSeries)\n      .map((k) => {\n        const date = dateFns.parse(k, \"MM/dd/yy\", new Date());\n        const dateStr = dateFns.formatISO9075(date, { representation: \"date\" });\n        return { date: dateStr, ...rawTimeSeries[k] };\n      })\n      .sort((a: TimeSeriesData, b: TimeSeriesData) =>\n        b.date.localeCompare(a.date)\n      );\n    data = { ...rawData, timeseries };\n  } catch (error) {\n    console.log(\"error:\", error);\n    return;\n  }\n\n  dispatch(fetchCountryHistoricDataSuccess(data));\n};\n\nexport default CoronaSlice.reducer;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { formatPercentage } from \"../../utils/formatHelpers\";\n\ninterface Props {\n  percentage?: boolean;\n  positiveGood?: boolean;\n  value: number | null | undefined;\n  withColor?: boolean;\n  withSign?: boolean;\n}\n\nconst NumberValue: React.FC<Props> = ({\n  percentage = false,\n  positiveGood = false,\n  value,\n  withColor = false,\n  withSign = false,\n}) => {\n  let sign = \"\";\n  if (withSign && value && value >= 0) {\n    sign = \"+\";\n  }\n\n  let valueStr;\n  if (value == null) {\n    valueStr = \"-\";\n  } else if (percentage) {\n    valueStr = formatPercentage(value);\n  } else {\n    valueStr = value.toLocaleString();\n  }\n\n  let good =\n    withColor &&\n    ((positiveGood && sign === \"+\") || (!positiveGood && sign === \"\"));\n\n  let bad =\n    withColor &&\n    ((positiveGood && sign === \"\") || (!positiveGood && sign === \"+\"));\n\n  return (\n    <span className={classnames({ good: good, bad: bad })}>\n      {sign}\n      {valueStr}\n    </span>\n  );\n};\n\nexport default NumberValue;\n","import { formatRelative, parseJSON } from \"date-fns\";\n\nexport function formatDate(d: string | null) {\n  if (d == null) {\n    return \"-\";\n  } else {\n    const s = formatRelative(parseJSON(d), new Date());\n    return s.charAt(0).toLocaleUpperCase() + s.slice(1);\n  }\n}\n\nexport function formatNumber(n: number) {\n  return \"blub\";\n}\n\nexport function formatPercentage(n: number) {\n  return `${Math.round(n * 1000) / 10} %`;\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from \"classnames\";\nimport { Card } from \"primereact/card\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport styles from \"./NumberCard.module.scss\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  countrycode: string;\n  label: string;\n  name?: string;\n  value?: string | number;\n}\n\ninterface DayPoint {\n  date: string;\n  value: number;\n  delta: number;\n}\n\nconst NumberCard: React.FC<Props> = ({ countrycode, label, name, value }) => {\n  const [weekData, setWeekData] = useState<DayPoint[]>([]);\n  const historicData = useSelector(\n    (state: RootState) =>\n      state.corona.historicData && state.corona.historicData[countrycode]\n  );\n  const { daysToShow } = useSelector((state: RootState) => state.corona);\n\n  useEffect(() => {\n    if (historicData == null || name == null) return;\n\n    const wd: DayPoint[] = new Array<DayPoint>(7);\n    for (let i = 1; i < daysToShow; i++) {\n      wd.push({\n        date: historicData.timeseries[i].date,\n        value: historicData.timeseries[i][name] as number,\n        delta: historicData.timeseries[i][name + 'Delta'] as number,\n      });\n    }\n    setWeekData(wd);\n  }, [historicData, name]);\n\n  let valueStr = null;\n  if (value) {\n    valueStr = value as number;\n  } else if (historicData && name && historicData.timeseries[0][name]) {\n    valueStr = historicData.timeseries[0][name] as number;\n  }\n\n  return (\n    <div className=\"p-col-6 p-md-3 p-lg-2\">\n      <Card className=\"card\">\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} />\n        </div>\n\n        {weekData.map((wd) => (\n          <div key={wd.date} className=\"p-grid\">\n            <div className={classnames(\"p-col-5\", styles.right)}>\n              <NumberValue value={wd.delta} withSign={true} withColor={true} positiveGood={name === 'recovered'} />\n            </div>\n            <div className={classnames(\"p-col-7\", styles.right)}>\n              <NumberValue value={wd.value} />\n            </div>\n          </div>\n        ))}\n      </Card>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from \"classnames\";\nimport { Card } from \"primereact/card\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport styles from \"./NumberCard.module.scss\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  countrycode: string;\n  percentage?: boolean;\n  label: string;\n  name: string;\n  suffix?: string;\n  value?: string | number;\n}\n\ninterface DayPoint {\n  date: string;\n  value: number;\n}\n\nconst SingleNumberCard: React.FC<Props> = ({\n  countrycode,\n  percentage = false,\n  label,\n  name,\n  suffix,\n  value,\n}) => {\n  const [weekData, setWeekData] = useState<DayPoint[]>([]);\n  const { daysToShow } = useSelector((state: RootState) => state.corona);\n  const historicData = useSelector(\n    (state: RootState) =>\n      state.corona.historicData && state.corona.historicData[countrycode]\n  );\n\n  useEffect(() => {\n    if (historicData == null || name == null) return;\n\n    const wd: DayPoint[] = new Array<DayPoint>(7);\n    for (let i = 1; i < daysToShow; i++) {\n      wd.push({\n        date: historicData.timeseries[i].date,\n        value: historicData.timeseries[i][name] as number,\n      });\n    }\n    setWeekData(wd);\n  }, [historicData]);\n\n  let valueStr = NaN;\n  if (historicData) {\n    valueStr = historicData.timeseries[0][name] as number;\n  }\n\n  return (\n    <div className=\"p-col\">\n      <Card className=\"card\">\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} percentage={percentage} /> {suffix}\n        </div>\n\n        {weekData.map((wd) => (\n          <div key={wd.date} className=\"p-grid p-justify-center\">\n            <div className={classnames(\"p-col\", styles.right)}>\n              <NumberValue value={wd.value} percentage={percentage} /> {suffix}\n            </div>\n          </div>\n        ))}\n      </Card>\n    </div>\n  );\n};\n\nexport default SingleNumberCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchCountryHistoricData } from \"./coronaSlice\";\nimport styles from \"./CountryData.module.scss\";\nimport NumberCard from \"./NumberCard\";\nimport SingleNumberCard from \"./SingleNumberCard\";\nimport { formatDate } from \"../../utils/formatHelpers\";\nimport classNames from \"classnames\";\n\nexport interface Props {\n  countrycode: string;\n}\n\nconst CountryData: React.FC<Props> = ({ countrycode }) => {\n  const dispatch = useDispatch();\n  const data = useSelector(\n    (state: RootState) => state.corona.historicData[countrycode]\n  );\n\n  useEffect(() => {\n    dispatch(fetchCountryHistoricData(countrycode));\n  }, []);\n\n  return (\n    <div className=\"ui container\">\n      <div className=\"p-grid\">\n        <h2 className={classNames(\"p-col\", styles.countryHeader)}>\n          {data?.countryregion || countrycode}\n        </h2>\n        <h3 className={classNames(\"p-col\", styles.countryHeader, \"right\")}>\n          {formatDate(data?.lastupdate)}\n        </h3>\n      </div>\n\n      <div className=\"p-grid\">\n        <NumberCard countrycode={countrycode} name=\"acute\" label=\"Acute\" />\n\n        <NumberCard\n          countrycode={countrycode}\n          name=\"confirmed\"\n          label=\"Confirmed\"\n        />\n\n        <NumberCard\n          countrycode={countrycode}\n          name=\"recovered\"\n          label=\"Recovered\"\n        />\n\n        <NumberCard countrycode={countrycode} name=\"deaths\" label=\"Deaths\" />\n\n        <SingleNumberCard\n          countrycode={countrycode}\n          name=\"fatality\"\n          label=\"Fatality Rate\"\n          percentage\n        />\n\n        <SingleNumberCard\n          countrycode={countrycode}\n          label=\"Doubling Time\"\n          name=\"doublingtime\"\n          suffix=\"d\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CountryData;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Card } from \"primereact/card\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport styles from \"./NumberCard.module.scss\";\nimport NumberValue from \"./NumberValue\";\n\ninterface Props {\n  label: string;\n  name?: string;\n  value?: number | null;\n  percentage?: boolean;\n}\n\nconst NumberCard: React.FC<Props> = ({ label, name, value, percentage }) => {\n  const data = useSelector((state: RootState) => state.corona.latestGlobalData);\n  const valueStr =\n    value || (data != null && name != null && (data[name] as number)) || null;\n\n  return (\n    <div className=\"p-col\">\n      <Card className=\"card\">\n        <div className={styles.label}>{label}</div>\n        <div className={styles.number}>\n          <NumberValue value={valueStr} percentage={percentage} />\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default NumberCard;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport GlobalCard from \"./GlobalCard\";\nimport styles from \"./CountryData.module.scss\";\n\nconst GlobalData: React.FC = () => {\n  const data = useSelector((state: RootState) => state.corona.latestGlobalData);\n\n  return (\n    <div className=\"ui container\">\n      <h2 className={styles.countryHeader}>World-Wide</h2>\n\n      <div className=\"p-grid\">\n        <GlobalCard label=\"Confirmed\" name=\"confirmed\" />\n        <GlobalCard label=\"Recovered\" name=\"recovered\" />\n        <GlobalCard label=\"Deaths\" name=\"deaths\" />\n        <GlobalCard\n          label=\"Fatality Rate\"\n          value={(data && data.deaths / data.confirmed) || null}\n          percentage={true}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalData;\n","import { PickList } from \"primereact/picklist\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { Country, setCountries } from \"./coronaSlice\";\n\nconst CountryPickList: React.FC = () => {\n  const { selectedCountries, sourceCountries } = useSelector(\n    (state: RootState) => state.corona\n  );\n  const dispatch = useDispatch();\n\n  const itemTemplate = (country: Country) => (\n    <div key={country.code}>{country.name}</div>\n  );\n\n  const handleChange = (event: any) => {\n    dispatch(setCountries(event.source, event.target));\n  };\n\n  return (\n    <PickList\n      source={sourceCountries}\n      target={selectedCountries}\n      itemTemplate={itemTemplate}\n      sourceHeader=\"Available\"\n      targetHeader=\"Seleced\"\n      responsive={true}\n      onChange={handleChange}\n      className={\"countryPickList\"}\n      sourceStyle={{ height: \"100%\" }}\n      targetStyle={{ height: \"100%\" }}\n    />\n  );\n};\n\nexport default CountryPickList;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from \"classnames\";\nimport { Button } from \"primereact/button\";\nimport { Dialog } from \"primereact/dialog\";\nimport { ToggleButton } from \"primereact/togglebutton\";\nimport { Toolbar } from \"primereact/toolbar\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchCountryHistoricData, resetCountries, setShowCharts } from \"./coronaSlice\";\nimport CountryPickList from \"./CountryPickList\";\nimport styles from \"./Settings.module.scss\";\n\nconst Settings: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n  const { selectedCountries, showCharts } = useSelector(\n    (state: RootState) => state.corona\n  );\n  const reloadCountries = () => {\n    selectedCountries.forEach((country) => {\n      dispatch(fetchCountryHistoricData(country.code));\n    });\n  };\n\n  return (\n    <>\n      <Dialog\n        header=\"Choose the countries to display\"\n        visible={visible}\n        modal={true}\n        onHide={() => setVisible(false)}\n        className={styles.dialog}\n        contentStyle={{ height: \"80vh\" }}\n      >\n        <CountryPickList />\n      </Dialog>\n\n      <Toolbar className={styles.toolbar}>\n        <ToggleButton\n          onLabel=\"Charts\"\n          offLabel=\"No Charts\"\n          onIcon=\"pi pi-check\"\n          offIcon=\"pi pi-times\"\n          checked={showCharts}\n          onChange={() => dispatch(setShowCharts(!showCharts))}\n          className={classNames(\n            styles.toggleButton,\n            \"p-button-raised p-button-rounded\"\n          )}\n        />\n\n        <Button\n          label=\"Reload\"\n          icon=\"pi pi-replay\"\n          className={classNames(\n            styles.button,\n            \"p-button-raised p-button-rounded p-button-success\"\n          )}\n          tooltip=\"Reload current data from server\"\n          onClick={reloadCountries}\n          tooltipOptions={{\n            position: \"bottom\",\n          }}\n        />\n\n        <Button\n          label=\"Countries\"\n          icon=\"pi pi-globe\"\n          className={classNames(\n            styles.button,\n            \"p-button-raised p-button-rounded\"\n          )}\n          tooltip=\"Select Countries\"\n          tooltipOptions={{\n            position: \"bottom\",\n          }}\n          onClick={() => setVisible(true)}\n        />\n\n        <Button\n          label=\"Reset\"\n          icon=\"pi pi-times\"\n          className=\"p-button-raised p-button-rounded p-button-warning\"\n          tooltip=\"Reset country list to defaults\"\n          onClick={() => dispatch(resetCountries())}\n          tooltipOptions={{\n            position: \"bottom\",\n          }}\n        />\n      </Toolbar>\n    </>\n  );\n};\n\nexport default Settings;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Chart } from \"primereact/chart\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { Card } from \"primereact/card\";\n\nexport interface Props {\n  countrycode: string;\n}\n\nconst CountryChart: React.FC<Props> = ({ countrycode }) => {\n  const [chartData, setChartData] = useState<any>(null);\n  const data = useSelector(\n    (state: RootState) => state.corona.historicData[countrycode]\n  );\n\n  useEffect(() => {\n    if (data == null || data.timeseries == null) {\n      return;\n    }\n\n    const reversed = data.timeseries.slice(0, 60).reverse();\n    const newData = {\n      labels: reversed.map((ts) => ts.date),\n      datasets: [\n        {\n          label: \"Acute\",\n          borderColor: \"#FFCB05\",\n          backgroundColor: \"#FFCB05\",\n          data: reversed.map((ts) => ts.acute),\n          fill: false,\n        },\n        {\n          label: \"Confirmed\",\n          backgroundColor: \"#005A9C\",\n          borderColor: \"#005A9C\",\n          data: reversed.map((ts) => ts.confirmed),\n          fill: false,\n        },\n        {\n          label: \"Recovered\",\n          backgroundColor: \"#34A835\",\n          borderColor: \"#34A835\",\n          data: reversed.map((ts) => ts.recovered),\n          fill: false,\n        },\n        {\n          label: \"Deaths\",\n          backgroundColor: \"#000\",\n          borderColor: \"#000\",\n          data: reversed.map((ts) => ts.deaths),\n          fill: false,\n        },\n      ],\n    };\n    setChartData(newData);\n  }, [data]);\n\n  if (chartData == null) return null;\n\n  return (\n    <Card title=\"Chart\">\n      <Chart type=\"line\" data={chartData} height={window.innerWidth < 600 ? \"300\" : \"\"} />\n    </Card>\n  );\n};\n\nexport default CountryChart;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../app/store\";\nimport { fetchLatestGlobalData, getCountries } from \"./coronaSlice\";\nimport CountryData from \"./CountryData\";\nimport styles from \"./Dashboard.module.scss\";\nimport GlobalData from \"./GlobalData\";\nimport { Card } from \"primereact/card\";\nimport Settings from \"./Settings\";\nimport CountryChart from \"./CountryChart\";\n\nconst Dashboard: React.FC = () => {\n  const dispatch = useDispatch();\n  const { selectedCountries, showCharts } = useSelector(\n    (state: RootState) => state.corona\n  );\n\n  useEffect(() => {\n    dispatch(getCountries());\n    dispatch(fetchLatestGlobalData());\n  }, []);\n\n  return (\n    <div className={styles.rootContainer}>\n      <h1>Mr K.'s Corona Dashboard</h1>\n      <Settings />\n\n      <GlobalData />\n\n      {selectedCountries.map((c) => (\n        <div key={c.code}>\n          <CountryData countrycode={c.code} />\n          {showCharts && <CountryChart countrycode={c.code} />}\n        </div>\n      ))}\n\n      <Card className=\"footer\">\n        <p>\n          Data is from John-Hopkins-University, updated once per day:{\" \"}\n          <a href=\"https://github.com/CSSEGISandData/COVID-19\">\n            https://github.com/CSSEGISandData/COVID-19\n          </a>\n        </p>\n\n        <p>\n          Inspired by Inje Lee's article.{\" \"}\n          <a href=\"https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\">\n            https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\n          </a>\n        </p>\n\n        <p>\n          Thanks to Ainize for providing the data API:{\" \"}\n          <a href=\"https://ainize.ai/laeyoung/wuhan-coronavirus-api\">\n            https://ainize.ai/laeyoung/wuhan-coronavirus-api\n          </a>\n        </p>\n      </Card>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./features/dashboard/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n\n// inspiration:\n// https://itnext.io/develop-the-corona-dashboard-in-a-day-b5f1be41fe33\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport coronaReducer from \"../features/dashboard/coronaSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    corona: coronaReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'primeflex/primeflex.css';\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCard_number__1rkk8\",\"left\":\"NumberCard_left__1bkGy\",\"right\":\"NumberCard_right__teMx2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Settings_dialog__3_Y1h\",\"dialogContent\":\"Settings_dialogContent__iaoEq\",\"button\":\"Settings_button__yl7or\",\"toggleButton\":\"Settings_toggleButton__jnQJG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryHeader\":\"CountryData_countryHeader__8c1j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootContainer\":\"Dashboard_rootContainer__1HTOq\"};"],"sourceRoot":""}